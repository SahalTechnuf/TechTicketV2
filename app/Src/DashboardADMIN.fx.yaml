"DashboardADMIN As screen.'phoneBrowseLayout_ver3.0'":
    LoadingSpinnerColor: =RGBA(135, 100, 184, 1)

    DashTicketsADMIN As gallery.galleryVertical:
        BorderColor: =RGBA(0, 134, 208, 1)
        BorderStyle: =BorderStyle.None
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        FocusedBorderThickness: =
        Height: =708
        Items: |-
            =
            
            User
            what does mean SharePoint lead designer?
            ChatGPT
            A SharePoint lead designer is typically a role within an organization responsible for overseeing the design, development, and implementation of SharePoint solutions. SharePoint is a platform developed by Microsoft for collaboration and document management within organizations.
            
            The responsibilities of a SharePoint lead designer may include:
            
            Designing and architecting SharePoint solutions to meet the organization's requirements and goals.
            Leading a team of developers and designers in implementing SharePoint solutions.
            Collaborating with stakeholders to gather requirements and define project scope.
            Customizing SharePoint sites, libraries, and workflows to streamline business processes.
            Ensuring the usability, accessibility, and scalability of SharePoint solutions.
            Providing guidance and training to end-users on how to use SharePoint effectively.
            Staying updated on the latest SharePoint features, best practices, and industry trends.
            Overall, a SharePoint lead designer plays a crucial role in leveraging SharePoint technology to improve collaboration, information management, and productivity within an organization.
            
            User
            what is sharePoint solution?
            ChatGPT
            A SharePoint solution refers to a set of tools, configurations, customizations, and components designed to address specific business needs or requirements within the Microsoft SharePoint platform. SharePoint solutions can vary widely in scope and complexity, depending on the organization's needs and the functionalities required.
            
            Here are some common examples of SharePoint solutions:
            
            Document Management Solution: This type of solution focuses on organizing, storing, and managing documents within SharePoint libraries. It may include features such as version control, metadata tagging, document workflows, and document security settings.
            
            Collaboration Solution: Collaboration solutions leverage SharePoint's capabilities to facilitate teamwork and communication among employees. This may involve creating team sites, discussion boards, shared calendars, task lists, and document collaboration features like co-authoring.
            
            Business Process Automation Solution: SharePoint can be used to automate various business processes, such as approval workflows, expense reimbursement processes, or document review cycles. These solutions typically involve designing custom workflows using SharePoint Designer or Microsoft Power Automate (formerly known as Microsoft Flow).
            
            Enterprise Content Management (ECM) Solution: ECM solutions in SharePoint focus on managing the entire lifecycle of enterprise content, from creation and storage to distribution and archival. They often include features like content categorization, records management, compliance management, and information governance.
            
            Custom Development Solution: In some cases, organizations may require custom-built solutions tailored to their specific needs. This could involve developing custom web parts, applications, or integrations with other systems that extend SharePoint's functionality.
            
            SharePoint solutions can be developed by in-house teams, third-party vendors, or SharePoint consultants. They are typically deployed within SharePoint environments, such as SharePoint Online (part of Microsoft 365) or SharePoint Server (on-premises). Proper planning, design, and governance are essential for the successful implementation of SharePoint solutions to ensure they align with the organization's objectives and meet the needs of end-users.
            
            User
            Designing and Developing  workflows, lists , forms, galleries,  and dashboards. Is it correct for sharepoint developer?
            ChatGPT
            Yes, that is correct for a SharePoint developer. SharePoint developers are responsible for designing, developing, and implementing various components and features within the SharePoint platform to meet the organization's requirements. This can include workflows, lists, forms, galleries, and dashboards, among other things.
            
            Here's a breakdown of each component:
            
            Workflows: SharePoint workflows automate business processes by defining a series of steps that need to be executed based on predefined conditions. SharePoint developers use tools like SharePoint Designer, Microsoft Power Automate, or custom code to create and customize workflows tailored to specific business needs.
            
            Lists: Lists are one of the fundamental building blocks of SharePoint, used to store and manage data in a structured format. SharePoint developers create and customize lists to capture various types of information such as tasks, contacts, events, or custom data sets.
            
            Forms: Forms provide a user interface for interacting with data stored in SharePoint lists or libraries. SharePoint developers design and customize forms using tools like SharePoint Designer, Microsoft Power Apps, or custom code to meet specific usability and functionality requirements.
            
            Galleries: Galleries in SharePoint typically refer to collections of images or files displayed in a visually appealing manner. SharePoint developers may design and develop galleries to showcase images, documents, or other media assets stored in SharePoint libraries.
            
            Dashboards: Dashboards provide visual representations of key performance indicators (KPIs), metrics, and data analysis within SharePoint. SharePoint developers design and develop dashboards using tools like SharePoint Designer, Microsoft Power BI, or custom code to provide insights and facilitate decision-making for stakeholders.
            
            Overall, SharePoint developers play a crucial role in customizing and extending the SharePoint platform to create tailored solutions that address the unique requirements of organizations and enhance productivity, collaboration, and business processes.
            
            User
            I have created an isuue tracking app in powerapps. I worked in Laptop. In the landing page it will show tickets. If there is no tickets it will show a text that "No ticket to display, please insert". For this I input a text label and in the text property write "No ticket to display, please insert". Should I write function for this text label in Onselect property?
            ChatGPT
            No, you do not need to write a function in the OnSelect property of the text label for this scenario. The OnSelect property is typically used for actions that occur when the user interacts with a control, such as clicking a button.
            
            To display the message "No ticket to display, please insert" when there are no tickets to display in your app, you can simply set the Text property of the text label to that message directly. Here's how you can do it:
            
            Select the text label control in PowerApps.
            In the Properties pane, locate the Text property.
            Enter the message "No ticket to display, please insert" directly into the Text property field.
            By setting the Text property of the text label to this message, it will automatically display that text whenever there are no tickets to display in your app. You don't need to use the OnSelect property for this purpose, as it's not relevant to displaying static text messages.
            
            User
            Wnen I open the  app in my mobile, I delete all the existing ticket but it does not showing the text label.
            ChatGPT
            If the text label is not displaying when you delete all existing tickets in your PowerApps app when viewed on mobile, there could be a few reasons why this is happening. Here are some troubleshooting steps you can take:
            
            Check Visibility Property: Ensure that the visibility property of the text label is set correctly. It should be set to true when there are no tickets to display. You can set the visibility property to an appropriate formula that evaluates whether there are any tickets in your data source. For example, you could use the CountRows function to count the number of tickets and set visibility based on whether the count is zero.
            
            Refresh Functionality: Make sure that the app refreshes or reloads the data source after tickets are deleted. If the data source is not refreshed, the app may still think there are tickets even though they have been deleted. You can use the Refresh function to reload the data source after deleting tickets.
            
            Testing Environment: Ensure that you are testing the app in a real-world scenario that accurately reflects how users will interact with it. Sometimes issues may only appear in certain environments or conditions.
            
            Mobile Preview: Test the app in mobile preview mode within the PowerApps studio to see if the issue persists. This will help you identify if the problem is specific to the mobile platform or if it's a general issue with your app.
            
            Check Data Source: Double-check your data source to ensure that tickets are actually being deleted properly. Sometimes issues can arise from data manipulation or deletion operations not working as expected.
            
            By going through these troubleshooting steps, you should be able to identify and resolve the issue with the text label not displaying when all tickets are deleted in your PowerApps app on mobile devices.
            
            User
            If there are no tickets a text label will show up.  Write function for visibility property for the text label
            ChatGPT
            To create a formula for the visibility property of the text label so that it shows up only when there are no tickets, you can use the CountRows function to count the number of tickets in your data source. If the count is zero, it means there are no tickets, and the visibility property should be set to true; otherwise, it should be set to false. Here's how you can do it:
            
            Select the text label control in PowerApps.
            In the Properties pane, locate the Visibility property.
            Enter the following formula into the Visibility property field:
            css
            Copy code
            Visibility: CountRows(TicketsDataSource) = 0
            Replace "TicketsDataSource" with the name of your data source where the tickets are stored. This formula will evaluate to true (showing the text label) when there are no rows in the data source, indicating that there are no tickets. Otherwise, it will evaluate to false (hiding the text label).
            
            User
            CountRows(Filter(
                    'Technuf Ticketing System',
                    StartsWith(
                        Upper(
                            Concatenate(
                                Text(Title),
                                " ",
                                Text(Description),
                                " ",
                                Text('Progress/Status'.Value),
                                " ",
                                Text('Issued By'.DisplayName),
                                " ",
                                Text('Issue Date and Time')
                            )
                         )
                     )
             )
             ) = 0  Explain and correct the syntex 
            ChatGPT
            The provided formula attempts to count the rows in a SharePoint list called 'Technuf Ticketing System' where the concatenated values of Title, Description, Progress/Status, Issued By, and Issue Date and Time do not start with any uppercase letters. If the count is zero, it implies that there are no such rows.
            
            Here's an explanation of the formula:
            
            Filter('Technuf Ticketing System', ... ): This part filters the 'Technuf Ticketing System' list based on a condition.
            
            StartsWith(Upper(Concatenate(...))): This part concatenates the values of Title, Description, Progress/Status, Issued By, and Issue Date and Time, converts the result to uppercase, and checks if it starts with any uppercase letters.
            
            CountRows(...) = 0: This part counts the rows in the filtered list. If the count is zero, it means there are no rows matching the condition.
            
            However, the syntax contains a few errors and inefficiencies. Let's correct it:
            
            plaintext
            Copy code
            CountRows(
                Filter(
                    'Technuf Ticketing System',
                    Not(
                        StartsWith(
                            Upper(
                                Concatenate(
                                    Text(Title),
                                    " ",
                                    Text(Description),
                                    " ",
                                    Text('Progress/Status'.Value),
                                    " ",
                                    Text('Issued By'.DisplayName),
                                    " ",
                                    Text('Issue Date and Time')
                                )
                            ),
                            "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"
                        )
                    )
                )
            )
            Explanation of corrections:
            
            Not(StartsWith(Upper(Concatenate(...)), "A B C ...")): This part checks if the concatenated string does not start with any uppercase letters. We use the Not function to invert the result of StartsWith.
            
            We also need to specify the characters "A B C ... Z" in the second argument of the StartsWith function. This ensures that we're checking for any uppercase letter from A to Z.
            
            With these corrections, the formula should now accurately count the rows where the concatenated values do not start with any uppercase letters.
            
            User
            In my screen if there is no ticket it will show a text label. I have written this formula in the visible property of the text label.  please correct the formula. CountRows(Filter(
                    'Technuf Ticketing System',
                    StartsWith(
                        Upper(
                            Concatenate(
                                Text(Title),
                                " ",
                                Text(Description),
                                " ",
                                Text('Progress/Status'.Value),
                                " ",
                                Text('Issued By'.DisplayName),
                                " ",
                                Text('Issue Date and Time')
                            )
                         )
                     )
             )
             ) = 0  
            ChatGPT
            To correct the formula for the visibility property of the text label so that it displays when there are no tickets, you'll need to modify it to check if there are no rows returned by the filter. Here's the corrected formula:
            
            plaintext
            Copy code
            CountRows(
                Filter(
                    'Technuf Ticketing System',
                    StartsWith(
                        Upper(
                            Concatenate(
                                Text(Title),
                                " ",
                                Text(Description),
                                " ",
                                Text('Progress/Status'.Value),
                                " ",
                                Text('Issued By'.DisplayName),
                                " ",
                                Text('Issue Date and Time')
                            )
                        ),
                        ""
                    )
                )
            ) = 0
            Explanation of corrections:
            
            The StartsWith function expects two parameters: the text string to search and the substring to check for at the start of the string. In this case, we want to check if the concatenated string is empty. So, we provide an empty string "" as the second parameter to StartsWith.
            
            By checking if the concatenated string starts with an empty string, we effectively check if there are no tickets, as an empty string would mean there are no concatenated values.
            
            With this corrected formula, the text label will be visible only when there are no tickets in the 'Technuf Ticketing System' list.
            
            User
            Still not showing any alternative formula?
            ChatGPT
            Apologies for the confusion. Let's simplify the formula for the visibility property of the text label. We can directly check if the count of rows in the filtered list is equal to zero. Here's the alternative formula:
            
            plaintext
            Copy code
            IsEmpty(
                Filter(
                    'Technuf Ticketing System',
                    StartsWith(
                        Upper(
                            Concatenate(
                                Text(Title),
                                " ",
                                Text(Description),
                                " ",
                                Text('Progress/Status'.Value),
                                " ",
                                Text('Issued By'.DisplayName),
                                " ",
                                Text('Issue Date and Time')
                            )
                        ),
                        ""
                    )
                )
            )
            Explanation:
            
            The IsEmpty function checks if the result of the filter operation is empty, i.e., if there are no tickets that match the condition.
            We still use the same Filter function to filter the 'Technuf Ticketing System' list based on the concatenated values. If there are no matching rows, the filter result will be empty, and the IsEmpty function will return true, indicating that there are no tickets.
            The condition inside the Filter function remains the same, checking if the concatenated string starts with an empty string.
            This formula should correctly display the text label when there are no tickets in the 'Technuf Ticketing System' list.
            
            User
            In my screen if there are no tickets it will show a text label. I have written this formula in the visible property for the text label.  please correct the formula.  CountRows(
                DashTickets.AllItems)
            )=0
            ChatGPT
            Your formula looks mostly correct, but there is a minor syntax error. You have an extra closing parenthesis after DashTickets.AllItems. Here's the corrected formula:
            
            plaintext
            Copy code
            CountRows(DashTickets.AllItems) = 0
            Explanation:
            
            DashTickets.AllItems refers to all the items in the 'DashTickets' data source.
            CountRows() counts the number of rows/items in the data source.
            The formula checks if the count of rows in the 'DashTickets' data source is equal to zero. If it is, the condition evaluates to true, indicating there are no tickets, and the text label will be visible.
            With this corrected formula, the text label should display when there are no tickets in the 'DashTickets' data source.
            
            User
            Tickets are updating in lists but not showing in the app screen what could be the reason?
            ChatGPT
            If tickets are updating in the lists but not showing up in the app screen, there could be several reasons for this issue. Here are some common troubleshooting steps you can take to identify and resolve the problem:
            
            Refresh Data Source: Ensure that your app is properly refreshing the data source that feeds the tickets into the app. If the data source is not being refreshed, the app will not display the updated tickets. You can use the Refresh function in PowerApps to manually refresh the data source or configure automatic data refresh settings if applicable.
            
            Check Filters and Queries: Review any filters or queries applied to the data source in your app. Make sure that the filters are not excluding the updated tickets from being displayed. If necessary, adjust the filters to include the updated tickets.
            
            Verify Data Source Connection: Confirm that the connection to the data source is established correctly in your app. If there are any issues with the data source connection, the app may not be able to retrieve the updated tickets. Check the connection settings and credentials to ensure they are accurate and up-to-date.
            
            Cache Clearing: Sometimes, the app may be displaying cached data instead of fetching the latest data from the data source. Try clearing the cache in your app and refreshing the data source to see if the updated tickets appear.
            
            Permissions: Ensure that the user accessing the app has the necessary permissions to view the tickets in the lists. If the user does not have sufficient permissions, the tickets will not be displayed in the app.
            
            Test in Different Environments: Test the app in different environments (e.g., web browser, mobile device) to see if the issue persists across all platforms. This can help identify if the problem is specific to a particular environment or device.
            
            Error Handling: Check for any error messages or warnings in the app that may indicate issues with data retrieval or display. Address any errors or warnings to ensure smooth operation of the app.
            
            By following these troubleshooting steps, you should be able to identify the reason why the updated tickets are not showing up in your app and take appropriate action to resolve the issue.
            
            User
            how to Refresh function in PowerApps to manually
            ChatGPT
            In PowerApps, you can manually refresh a data source using the Refresh function. Here's how you can do it:
            
            Navigate to the screen or control where you want to trigger the data refresh.
            
            Select the control (button, icon, etc.) that you want to use to trigger the refresh. If you don't have a control yet, you can add one by inserting a button or an icon from the Insert tab in the ribbon.
            
            Once the control is selected, go to the Properties pane on the right-hand side.
            
            Locate the OnSelect property of the control.
            
            Enter the following formula in the OnSelect property to refresh the data source:
            
            plaintext
            Copy code
            Refresh(DataSourceName)
            Replace DataSourceName with the name of your data source that you want to refresh. For example, if your data source is named "DashTickets", the formula would be:
            
            plaintext
            Copy code
            Refresh(DashTickets)
            Save your changes.
            
            Test the app by interacting with the control (e.g., clicking the button or icon) to trigger the refresh.
            
            When you interact with the control, PowerApps will execute the Refresh function, which will refresh the specified data source, fetching the latest data from the underlying data storage. This ensures that your app displays the most up-to-date information to the users.
            
            User
            How to  clearing the cache in your app and refreshing the data source to see if the updated tickets appear.
            ChatGPT
            In PowerApps, you don't have direct control over clearing the cache like you might in a traditional software application. However, there are some steps you can take to ensure that your app is fetching the latest data from the data source:
            
            Close and Reopen the App: Simply closing the app and reopening it can sometimes force a refresh of the data, fetching the latest information from the data source.
            
            Refresh the Data Source: As mentioned earlier, you can use the Refresh function in PowerApps to manually refresh the data source. By adding a refresh action to a button or another control in your app, users can trigger a refresh of the data source themselves.
            
            Check Connection Settings: Ensure that your app's connection settings are configured correctly to fetch live data from the data source rather than using cached data. You can review and adjust these settings in the PowerApps editor.
            
            Test in Different Environments: Sometimes, caching issues may be specific to certain environments or devices. Test your app in different environments (e.g., web browser, mobile device) to see if the problem persists across all platforms.
            
            Use ClearCollect to Refresh: In some cases, using the ClearCollect function in PowerApps can help in refreshing data. ClearCollect retrieves data from a data source and stores it in a collection. By clearing and then repopulating a collection, you can effectively refresh the data. However, note that this approach may not work for all scenarios and can consume additional resources.
            
            Review Data Source Configuration: Double-check the configuration of your data source in PowerApps to ensure that it is set up correctly to fetch live data. Verify the connection settings, authentication methods, and any other relevant parameters.
            
            By following these steps, you can ensure that your PowerApps app is fetching the latest data from the data source, minimizing the chances of displaying outdated or cached information.
            
            User
            Sort(
                Filter(
                    'Technuf Ticketing System',
                    StartsWith(
                        Upper(
                            Concatenate(
                                Text(Title),
                                " ",
                                Text(Description),
                                " ",
                                Text('Progress/Status'.Value),
                                " ",
                                Text('Issued By'.DisplayName),
                                " ",
                                Text('Issue Date and Time')
                            )
                        ),
                        Upper(SearchTicket.Text)
                    ) && 'Issued By'.Email = User().Email// Filter rows where 'Issued by' field matches current user's email
                ),
                'Issue Date and Time',
                SortOrder.Descending
            ) explain this function
            ChatGPT
            This function is used to filter and sort the data from the 'Technuf Ticketing System' list based on certain criteria. Let's break down the function step by step:
            
            Filter Function:
            
            The Filter function is used to filter the rows of the 'Technuf Ticketing System' list based on specified conditions.
            In this case, it filters rows based on two conditions:
            StartsWith Function: It checks if the concatenated string of Title, Description, Progress/Status, Issued By, and Issue Date and Time starts with the uppercase version of the text entered in the SearchTicket control. This filters rows based on a search term entered by the user.
            'Issued By'.Email = User().Email: It filters rows where the 'Issued By' field matches the email address of the current user. This ensures that users only see tickets that they have issued.
            Sort Function:
            
            The Sort function is used to sort the filtered rows based on a specific column and sort order.
            It sorts the filtered rows based on the 'Issue Date and Time' column in descending order.
            'Issue Date and Time': This specifies the column based on which the sorting will be done.
            SortOrder.Descending: This specifies the sort order, which is descending in this case. It means that the most recent tickets will appear first in the sorted list.
            So, overall, this function filters the 'Technuf Ticketing System' list based on the search term entered by the user and the current user's email address. It then sorts the filtered rows based on the 'Issue Date and Time' column in descending order, ensuring that the most recent tickets matching the search criteria appear at the top of the list.
            
            User
            Is it correct?
            ChatGPT
            Upon reviewing the function provided:
            
            plaintext
            Copy code
            Sort(
                Filter(
                    'Technuf Ticketing System',
                    StartsWith(
                        Upper(
                            Concatenate(
                                Text(Title),
                                " ",
                                Text(Description),
                                " ",
                                Text('Progress/Status'.Value),
                                " ",
                                Text('Issued By'.DisplayName),
                                " ",
                                Text('Issue Date and Time')
                            )
                        ),
                        Upper(SearchTicket.Text)
                    ) && 'Issued By'.Email = User().Email// Filter rows where 'Issued by' field matches current user's email
                ),
                'Issue Date and Time',
                SortOrder.Descending
            )
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        OnSelect: |-
            =Set(selectedItem, ThisItem);
            Navigate(ViewEdit, Transition.None, {selectedItem: DashTicketsADMIN.Selected})
        TabIndex: |
            =3
        TemplatePadding: =10
        TemplateSize: =226
        Transition: =Transition.Push
        Y: =323
        ZIndex: =1

        Button6_1 As button:
            BorderColor: =RGBA(0, 134, 208, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            DisabledFill: =RGBA(244, 244, 244, 1)
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderColor: =ColorFade(Self.Fill, -75%)
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Height: =216
            HoverBorderColor: =RGBA(0, 0, 0, 0)
            HoverColor: =RGBA(255, 255, 255, 1)
            HoverFill: =ColorFade(RGBA(135, 100, 184, 1), -10%)
            OnSelect: =Select(Parent)
            PressedBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -50%)
            PressedColor: =RGBA(255, 255, 255, 1)
            PressedFill: =ColorFade(RGBA(135, 100, 184, 1), -30%)
            RadiusBottomLeft: =15
            RadiusBottomRight: =15
            RadiusTopLeft: =15
            RadiusTopRight: =15
            Size: =24
            Text: =""
            Width: =607
            ZIndex: =1

        DashCat_1 As label:
            AutoHeight: =true
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Height: =30
            LineHeight: =1
            OnSelect: =Select(Parent)
            Size: =18
            Text: =ThisItem.Title
            Width: =341
            X: =160
            Y: =18
            ZIndex: =2

        DashDesc_1 As label:
            AutoHeight: =true
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            Height: =41
            OnSelect: =Select(Parent)
            Size: =17
            Text: =ThisItem.Description
            Width: =600
            X: =9
            Y: =172
            ZIndex: =3

        DashAuthor_2 As label:
            AutoHeight: =true
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            LineHeight: =1
            OnSelect: =Select(Parent)
            Size: =17
            Text: |-
                ="Posted by:"
            Width: =138
            X: =160
            Y: =53
            ZIndex: =5

        DashEmail_2 As label:
            AutoHeight: =true
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Height: =30
            LineHeight: =1
            OnSelect: =Select(Parent)
            Size: =17
            Text: |-
                ="Email:"
            Width: =85
            X: =160
            Y: =87
            ZIndex: =6

        DashDnT_1 As label:
            AutoHeight: =true
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            Height: =30
            LineHeight: =1
            OnSelect: =Select(Parent)
            Size: =17
            Text: |-
                =Text(ThisItem.'Issue Date and Time',    "mm/dd/yyyy        hh:mm AM/PM")
            Width: =378
            X: =207
            Y: =126
            ZIndex: =7

        Image_1 As image:
            BorderColor: =RGBA(0, 134, 208, 1)
            BorderStyle: =BorderStyle.Dotted
            BorderThickness: =2
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =4
            Height: =141
            HoverBorderColor: =RGBA(0, 0, 0, 0)
            HoverFill: =RGBA(0, 0, 0, 0)
            Image: =ThisItem.'Image (Optional)'
            OnSelect: =Select(Parent)
            PressedBorderColor: =RGBA(0, 0, 0, 0)
            PressedFill: =RGBA(0, 0, 0, 0)
            RadiusBottomLeft: =15
            RadiusBottomRight: =15
            RadiusTopLeft: =15
            RadiusTopRight: =15
            Width: =145
            X: =9
            Y: =11
            ZIndex: =8

        Icon1_1 As icon.CalendarBlank:
            BorderColor: =RGBA(0, 0, 0, 0)
            Color: =RGBA(0, 134, 208, 1)
            DisabledBorderColor: =RGBA(166, 166, 166, 1)
            DisabledColor: =RGBA(220, 220, 220, 1)
            DisabledFill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =4
            Height: =33
            HoverBorderColor: =RGBA(0, 0, 0, 0)
            HoverColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
            HoverFill: =RGBA(0, 0, 0, 0)
            Icon: =Icon.CalendarBlank
            OnSelect: =Select(Parent)
            PressedBorderColor: =RGBA(0, 0, 0, 0)
            PressedColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
            PressedFill: =RGBA(0, 0, 0, 0)
            Width: =42
            X: =161
            Y: =128
            ZIndex: =9

        Icon2_1 As icon.Clock:
            BorderColor: =RGBA(0, 0, 0, 0)
            Color: =RGBA(0, 134, 208, 1)
            DisabledBorderColor: =RGBA(166, 166, 166, 1)
            DisabledColor: =RGBA(220, 220, 220, 1)
            DisabledFill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =4
            Height: =33
            HoverBorderColor: =RGBA(0, 0, 0, 0)
            HoverColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
            HoverFill: =RGBA(0, 0, 0, 0)
            Icon: =Icon.Clock
            OnSelect: =Select(Parent)
            PressedBorderColor: =RGBA(0, 0, 0, 0)
            PressedColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
            PressedFill: =RGBA(0, 0, 0, 0)
            Width: =42
            X: =335
            Y: =128
            ZIndex: =10

        DashEmail_3 As label:
            AutoHeight: =true
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            Height: =30
            LineHeight: =1
            OnSelect: =Select(Parent)
            Size: =17
            Text: =ThisItem.'Issued By'.Email
            Width: =320
            X: =236
            Y: =87
            ZIndex: =11

        DashAuthor_3 As label:
            AutoHeight: =true
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            LineHeight: =1
            OnSelect: =Select(Parent)
            Size: =17
            Text: =ThisItem.'Issued By'.DisplayName
            Width: =200
            X: =280
            Y: =53
            ZIndex: =12

        Label2_1 As label:
            Align: =Align.Center
            AutoHeight: =true
            BorderColor: |-
                =ColorFade(
                    Switch(
                        Text(ThisItem.'Progress/Status'.Value),
                        "Initiated",
                        RGBA(153,207,236,1),
                        "In Progress",
                        RGBA(140,98,14,1),
                        "Resolved",
                        RGBA(10,84,48,1)
                    ),
                    80%
                )
            BorderThickness: =1
            Color: |-
                =Switch(
                        Text(ThisItem.'Progress/Status'.Value),
                        "Initiated",
                        RGBA(153,207,236,1),
                        "In Progress",
                        RGBA(140,98,14,1),
                        "Resolved",
                        RGBA(10,84,48,1)
                    )
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            Fill: |-
                =ColorFade(
                    Switch(
                        Text(ThisItem.'Progress/Status'.Value),
                        "Initiated",
                        RGBA(153,207,236,1),
                        "In Progress",
                        RGBA(140,98,14,1),
                        "Resolved",
                        RGBA(10,84,48,1)
                    ),
                    80%
                )
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Bold
            Height: =56
            OnSelect: =Select(Parent)
            Size: =15
            Text: =ThisItem.'Progress/Status'.Value
            Width: =125
            X: =470
            Y: =21
            ZIndex: =13

    PageRefreshADMIN As icon.Reload:
        AccessibleLabel: =Self.Tooltip
        BorderColor: =RGBA(0, 0, 0, 0)
        Color: =RGBA(0, 134, 208, 1)
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledColor: =RGBA(220, 220, 220, 1)
        Height: =88
        Icon: =Icon.Reload
        OnSelect: =Refresh([@'Technuf Ticketing System'])
        PaddingBottom: =22
        PaddingLeft: =22
        PaddingRight: =22
        PaddingTop: =22
        PressedFill: =RGBA(0, 0, 0, 0)
        TabIndex: =0
        Tooltip: ="Refresh list"
        Width: =88
        X: =543
        Y: =171
        ZIndex: =3

    SearchTicketADMIN As text:
        BorderColor: =RGBA(0, 134, 208, 1)
        BorderThickness: =2
        Color: =RGBA(51, 51, 51, 1)
        Default: =""
        DelayOutput: =true
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledColor: =RGBA(166, 166, 166, 1)
        DisabledFill: =RGBA(244, 244, 244, 1)
        FocusedBorderThickness: =4
        Font: =Font.'Segoe UI'
        Height: =70
        HintText: ="Search"
        HoverBorderColor: =ColorFade(RGBA(0, 134, 208, 1), -30%)
        HoverColor: =RGBA(51, 51, 51, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: =true
        PaddingLeft: =70
        PressedBorderColor: =RGBA(0, 134, 208, 1)
        PressedColor: =RGBA(51, 51, 51, 1)
        PressedFill: =RGBA(255, 255, 255, 1)
        RadiusBottomLeft: =15
        RadiusBottomRight: =15
        RadiusTopLeft: =15
        RadiusTopRight: =15
        Size: =21
        Width: =528
        X: =13
        Y: =180
        ZIndex: =6

    SearchIconADMIN As icon.Search:
        BorderColor: =RGBA(0, 0, 0, 0)
        Color: =RGBA(128, 128, 128, 1)
        DisabledBorderColor: =RGBA(166, 166, 166, 1)
        DisabledColor: =RGBA(220, 220, 220, 1)
        DisabledFill: =RGBA(0, 0, 0, 0)
        FocusedBorderThickness: =4
        Height: =Self.Width
        HoverBorderColor: =RGBA(0, 0, 0, 0)
        HoverColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
        HoverFill: =RGBA(0, 0, 0, 0)
        Icon: =Icon.Search
        PaddingBottom: =14
        PaddingLeft: =14
        PaddingRight: =14
        PaddingTop: =14
        PressedBorderColor: =RGBA(0, 0, 0, 0)
        PressedColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
        PressedFill: =RGBA(0, 0, 0, 0)
        Tooltip: ="Search"
        Width: =SearchTicketADMIN.Height
        X: =SearchTicketADMIN.X
        Y: =SearchTicketADMIN.Y
        ZIndex: =7

    AddNewADMIN As button:
        BorderColor: =RGBA(0, 0, 0, 0)
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledColor: =RGBA(255, 255, 255, 1)
        DisabledFill: =RGBA(244, 244, 244, 1)
        Fill: =RGBA(0, 134, 208, 1)
        FocusedBorderColor: =ColorFade(Self.Fill, -75%)
        Font: =Font.'Segoe UI'
        FontWeight: =FontWeight.Semibold
        Height: =70
        HoverBorderColor: =RGBA(0, 0, 0, 0)
        HoverColor: =RGBA(255, 255, 255, 1)
        HoverFill: =ColorFade(RGBA(0, 134, 208, 1), -10%)
        OnSelect: =NewForm(Form3);Navigate(NewTicket, ScreenTransition.None)
        PressedBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -50%)
        PressedColor: =RGBA(255, 255, 255, 1)
        PressedFill: =ColorFade(RGBA(0, 134, 208, 1), -30%)
        RadiusBottomLeft: =15
        RadiusBottomRight: =15
        RadiusTopLeft: =15
        RadiusTopRight: =15
        Size: =24
        Text: ="Add New Ticket"
        Width: =614
        X: =13
        Y: =1048
        ZIndex: =10

    Label_IssuedADMIN As label:
        BorderColor: =RGBA(0, 0, 0, 0)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        Color: =RGBA(51, 51, 51, 1)
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledColor: =RGBA(166, 166, 166, 1)
        FocusedBorderThickness: =4
        Font: =Font.'Segoe UI'
        FontWeight: =FontWeight.Bold
        Height: =56
        Size: =25
        Text: ="Tickets"
        Width: =544
        X: =13
        Y: =250
        ZIndex: =11

    DashLogoADMIN As image:
        BorderColor: =RGBA(0, 0, 0, 0)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledFill: =RGBA(0, 0, 0, 0)
        FocusedBorderThickness: =4
        Height: =72
        HoverBorderColor: =RGBA(0, 0, 0, 0)
        HoverFill: =RGBA(0, 0, 0, 0)
        Image: =download_1
        PressedBorderColor: =RGBA(0, 0, 0, 0)
        PressedFill: =RGBA(0, 0, 0, 0)
        Width: =234
        X: =198
        Y: =26
        ZIndex: =12

    DashHeaderADMIN As label:
        BorderColor: =RGBA(0, 0, 0, 0)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        Color: =RGBA(51, 51, 51, 1)
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledColor: =RGBA(166, 166, 166, 1)
        FocusedBorderThickness: =4
        Font: =Font.'Segoe UI'
        FontWeight: =FontWeight.Bold
        Height: =75
        Size: =25
        Text: ="Ticketing System"
        Width: =280
        X: =180
        Y: =98
        ZIndex: =13

    Label7 As label:
        Align: =Align.Center
        BorderColor: =RGBA(0, 0, 0, 0)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        Color: =RGBA(219, 219, 219, 1)
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledColor: =RGBA(166, 166, 166, 1)
        FocusedBorderThickness: =4
        Font: =Font.'Segoe UI'
        FontWeight: =FontWeight.Semibold
        Height: =70
        Size: =21
        Text: ="Please create your first ticket below"
        Visible: =CountRows(DashTickets.AllItems) = 0 
        Width: =560
        X: =35
        Y: =920
        ZIndex: =14

    Label8 As label:
        Align: =Align.Center
        BorderColor: =RGBA(0, 0, 0, 0)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        Color: =RGBA(149, 149, 149, 1)
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledColor: =RGBA(166, 166, 166, 1)
        FocusedBorderThickness: =4
        Font: =Font.'Segoe UI'
        FontWeight: =FontWeight.Bold
        Height: =70
        Size: =30
        Text: ="No tickets to display"
        Visible: =CountRows(DashTickets.AllItems) = 0 
        Width: =560
        X: =40
        Y: =850
        ZIndex: =15

    Image3 As image:
        BorderColor: =RGBA(0, 0, 0, 0)
        BorderStyle: =BorderStyle.None
        BorderThickness: =2
        DisabledBorderColor: =RGBA(0, 0, 0, 0)
        DisabledFill: =RGBA(0, 0, 0, 0)
        FocusedBorderThickness: =4
        Height: =266
        HoverBorderColor: =RGBA(0, 0, 0, 0)
        HoverFill: =RGBA(0, 0, 0, 0)
        Image: =Picture1
        PressedBorderColor: =RGBA(0, 0, 0, 0)
        PressedFill: =RGBA(0, 0, 0, 0)
        Visible: =CountRows(DashTickets.AllItems) = 0 
        Width: =320
        X: =153
        Y: =584
        ZIndex: =16

